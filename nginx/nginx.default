server {
  listen 80;
  server_name localhost.local;

  client_max_body_size 0;                  # disable any limits to avoid HTTP 413 for large image uploads
  chunked_transfer_encoding on;            # required to avoid HTTP 411: see Issue #1486 (https://github.com/dotcloud/docker/issues/1486)

  proxy_set_header Host      $http_host;   # required for docker client's sake
  proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP

  root  /usr/local/nginx/html;
  index  index.html index.htm;

  # send all requests to the `/auth` endpoint for authorization
  auth_request /auth;

  # if validate returns `401 not authorized` then forward the request to the error401block
  error_page 401 = @error401;

  location = /auth {
    # lasso can run behind the same nginx-revproxy
    # May need to add "internal", and comply to "upstream" server naming
    internal;
    proxy_pass http://id.localhost.local;

    # lasso only acts on the request headers
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";

    # pass X-Lasso-User along with the request
    auth_request_set $auth_resp_x_lasso_user $upstream_http_x_lasso_user;

    # these return values are used by the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_lasso_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_lasso_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_lasso_failcount;
  }

  location @error401 {
    # redirect to lasso for login
    return 302 http://id.localhost.local/login?url=$scheme://$http_host$request_uri&lasso-failcount=$auth_resp_failcount&X-Lasso-Token=$auth_resp_jwt&error=$auth_resp_err;
  }

  # proxy pass authorized requests to your service
  location / {
    # proxy_pass http://dev.yourdomain.com:8080;
    # set user header (usually an email)
    proxy_set_header X-Lasso-User $auth_resp_x_lasso_user;
  }

  # location = /auth {
  #   proxy_pass {{auth_backend}};
  #   proxy_pass_request_body off;
  #   proxy_set_header Content-Length "";
  #   proxy_set_header X-Original-URI $request_uri;
  #   proxy_set_header X-Docker-Token "";
  # }

  # location / {
  #   proxy_pass {{backend}};
  #   auth_request /auth;
  #   proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
  #   proxy_buffering off;
  # }

  # location /_ping {
  #   auth_basic off;
  #   proxy_pass {{backend}};
  # }
}

server {
  listen 80;
  server_name id.localhost.local;
  location / {
    proxy_set_header Host id.localhost.local;
    proxy_pass http://auth:9090;
  }
}
